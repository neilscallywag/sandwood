/*
 * Sandwood
 *
 * Copyright (c) 2019-2024, Oracle and/or its affiliates
 * 
 * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
 */
/*
 * Model based on the paper Estimating Primary Demand for Substitutable Products from Sales Transaction 
 * Data by Gustavo Vulcano, Garrett van Ryzin, and Richard Ratliff.
 * https://business.columbia.edu/sites/default/files-efs/pubfiles/5397/vanRyzin_Estimating.pdf
 */
package org.sandwood.compiler.tests.parser;

model Vulcano2012notNormalized(int noProducts, int T, int s, int[][] ObsSales, int[][] Avail) {
    // Avail is the availability matrix, T-by-noProducts

    // draw utilities
    double[] ut = gaussian(0, 10).sample(noProducts);

    //exponentiate right here (in the non-basic models move to the for loop)
    double[] exped = new double[noProducts];
    for(int j : [0..noProducts)) {
    exped[j] = exp(ut[j]);
    }

    // priors for the distribution of lambdas (for arrivals). They can be supplied as a vector if RGBU has some estimates, or just use some ad hoc priors
    double[ ] lambda = gamma(10,10).sample(T);

    // draw arrivals
    int[] arrivals = new int[T];
    for (int t : [0..T)){
    arrivals[t]= poisson(lambda[t]).sample();
    }

    int[][] Sales = new int[T][noProducts];

    for (int t:[0..T)){
        // for each period t calculate choice probabilities and sales

        double[] weekly_rates = new double[noProducts+1];
        double[] weekly_ut = new double[noProducts+1];

        for (int j : [0..noProducts)) {
            weekly_ut[j] = exped[j]*Avail[t][j] ;
        }
        // add outside option value (which is always available)
        weekly_ut[noProducts] = 1.0;
        double denom = reduce(weekly_ut, 0, (k, l) -> { return k + l; });

        for (int j : [0..noProducts]) {
            weekly_rates[j] = weekly_ut[j]/denom ;
        }

        int[] weekly_sales = multinomial(weekly_rates, arrivals[t]).sample();

        //getting rid of the no purchase observation (last one in the vector of weekly_sales)
        int[] observed_weekly_sales = new int[noProducts];
        for (int j : [0..noProducts)) {
            observed_weekly_sales[j] = weekly_sales[j] ;
        }

        // record sales for period t
        Sales[t] = observed_weekly_sales;

    }
    // assert that generated sales match observed sales
    Sales.observe(ObsSales);
}