/*
 * Sandwood
 *
 * Copyright (c) 2019-2023, Oracle and/or its affiliates
 * 
 * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
 */

package org.sandwood.compiler.tests.parser;

model HMMTestFromStan(boolean[] flipsMeasured) {
		int states = 2;

		double[] v = new double[states];
		for(int i:[0..states))
			v[i] = 0.1;
		
		double[][] m = dirichlet(v).sample(states);
		double[] bias = beta(1.0, 1.0).sample(states);

		int samples = flipsMeasured.length;
		int[] st = new int[samples];
		//Commented lines are the lines missing in the Stan example. 
		//This seems to make sense, as there is no transition from state 0 to state 0,
		//Just a possible state being picked based on the observed data.
		//
		//Forward execution is more complex now as st[0] is used but never set.
		//we could add:
		st[0] = categorical(m[0]).sample();  
		
		//Original code commented out below.
		
		//st[0] = 0;
				
		boolean[] flips = new boolean[samples];

		//st[0] = categorical(m[st[0]]).sample(); 
		for(int i:[1..samples))
			st[i] = categorical(m[st[i - 1]]).sample();


		for(int j:[0..samples))
			flips[j] = bernoulli(bias[st[j]]).sample();

		flips.observe(flipsMeasured);
}
