/*
 * Sandwood
 *
 * Copyright (c) 2019-2023, Oracle and/or its affiliates
 * 
 * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
 */

package org.sandwood.compiler.tests.parser;

model HMMTestPart4(boolean[][][] flipsMeasured) {
		int states = 2;

		double[] v = new double[states];
		for(int i:[0..states))
			v[i] = 0.1;
		
		double[][] m = dirichlet(v).sample(states);
		double[] bias = beta(1.0, 1.0).sample(states);

		int samples = flipsMeasured.length;
		
		
		int[][][] st = new int[samples][][];
		for(int i:[0..samples)) {
			st[i] = new int[samples][];
			for(int j:[0..samples))
				st[i][j] = new int[samples];
		}

		st[0][0][0] = categorical(m[0]).sample();

		for(int i1:[1..samples))
			for(int j1:[0..samples))
				for(int k1:[0..samples))
					st[i1][j1][k1] = categorical(m[0]).sample();
			
		boolean[][][] flips = new boolean[samples][][];
		for(int i2:[0..samples)) {
			flips[i2] = new boolean[samples][];
			for(int j2:[0..samples))
				flips[i2][j2] = new boolean[samples];
		}
			
		for(int l:[0..samples))
			for(int p:[0..samples))
				for(int n:[0..samples))
					flips[l][n][p] = bernoulli(bias[st[p][l][n]]).sample();

		flips.observe(flipsMeasured);
}
