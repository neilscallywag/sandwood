package org.sandwood.compiler.tests.parser;


model Vulcano2012basicBroken(int noProducts, int T, int[][] ObsSales, int[][] Avail) {
    // Avail is the availability matrix, T-by-noProducts
    // r is the normalization constant here, number between 0 and 1. "Relative appeal of the outside option"
    double r = 0.3;

    // draw utilities
    // (in the paper v(=exp^ut) are always normalized to sum up to 1/r. This prior won't make the sum to be 1/r on average, but at least something close)
    double[] ut = gaussian(0, 1).sample(noProducts);

    //exponentiate right here (in the non-basic models move to the for loop)
    double[] exped = new double[noProducts];
    for(int j : [0..noProducts)) {
        exped[j] = exp(ut[j]);
    }
    double sum = reduce(exped, 0, (k, l) -> { return k + l; });

    //now normalize
    double[] expedNorm = new double[noProducts];
    for(int j : [0..noProducts)) {
        expedNorm[j] = exped[j]/(r*sum);
    }
    double sumNorm = reduce(expedNorm, 0, (k, l) -> { return k + l; });

    // priors for the distribution of lambdas (for arrivals). They can be supplied as a vector if RGBU has some estimates, or just use some priors
    double[ ] lambda = new double[T];

    //calculate priors for lambdas
    double[][] v_s = new double[T][noProducts];
    for (int t : [0..T)){
        for (int j : [0..noProducts)){
            v_s[t][j] = expedNorm[j]*Avail[t][j];
        }
    }

    double[] v_s_sum = new double[T];
    for (int t : [0..T)){
        v_s_sum[t] = reduce(v_s[t], 0, (k, l) -> { return k + l; });
        int[] week_sales = ObsSales[t];
        int sales_sum = reduce(week_sales, 0, (k, l) -> { return k + l; });
        lambda[t] = sales_sum*sumNorm/(1+sumNorm)*(v_s_sum[t]+1)/v_s_sum[t];
    }

    // draw arrivals
    int[] arrivals = new int[T];
    for (int t : [0..T)){
    arrivals[t]= poisson(lambda[t]).sample();
    }

    int[][] Sales = new int[T][noProducts];

    for (int t:[0..T)){
        // for each period t calculate choice probabilities and sales

        double[] weekly_rates = new double[noProducts+1];
        double[] weekly_ut = new double[noProducts+1];

        for (int j : [0..noProducts)) {
            weekly_ut[j] = exped[j]*Avail[t][j] ;    //here we don't use Norm anymore, because of our choice of lambdas
        }
        // add outside option value (which is always available)
        weekly_ut[noProducts] = 1.0;
        double denom = reduce(weekly_ut, 0, (k, l) -> { return k + l; });

        for (int j : [0..noProducts]) {
            weekly_rates[j] = weekly_ut[j]/denom ;
        }

        int[] weekly_sales = multinomial(weekly_rates, arrivals[t]).sample();

        //getting rid of the no purchase observation (last one in the vector of weekly_sales)
        int[] observed_weekly_sales = new int[noProducts];
        for (int j : [0..noProducts)) {
                    observed_weekly_sales[j] = weekly_sales[j] ;
                }

        // record sales for period t
        Sales[t] = observed_weekly_sales;

                                }
    // assert that generated sales match observed sales
    Sales.observe(ObsSales);

}