/*
 * Sandwood
 *
 * Copyright (c) 2019-2023, Oracle and/or its affiliates
 * 
 * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
 */

package org.sandwood.compiler.tests.parser;

model ReductionTest(boolean[] flipsMeasured, int noCats) {
	int noFlips = flipsMeasured.length;
	int noStates = noFlips/noCats;
	
	double[] v = new double[noStates];
	for(int i:[0..noStates))
		v[i] = 0.1;
	
	double[][] m = dirichlet(v).sample(noCats);
	
	double[] bias = beta(1.0, 1.0).sample(noFlips);
	
	int[] st = new int[noCats];


	for(int i:[0..noCats))
		st[i] = categorical(m[i]).sample();
			
	boolean[] flips = new boolean[noFlips];
			
	for(int j:[0..noFlips))
		flips[j] = bernoulli(bias[sum(st)]).sample();

	flips.observe(flipsMeasured);
	
	private int sum(int[] a) {
		return reduce(a, 0, (i,j) -> {
			return i + j;
		});
	}
}