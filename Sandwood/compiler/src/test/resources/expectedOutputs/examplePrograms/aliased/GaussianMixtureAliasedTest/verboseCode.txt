int k = 5;
double var2 = 1.0;
int var3 = 10;
double[] xMeasured = new double[var3];
int var5 = 0;
int var6 = 1;
for(int var7=var5; var7 < var3; var7 += var6) {
	xMeasured[var7] = var2;
}
double var9 = 1.0;
double[] alpha = new double[k];
int var11 = 0;
int var12 = 1;
for(int var13=var11; var13 < k; var13 += var12) {
	alpha[var13] = var9;
}
Dirichlet var15 = new Dirichlet(alpha);
double[] phi = var15.sample();
double var17 = 0.0;
double var18 = 20.0;
Gaussian var19 = new Gaussian(var17, var18);
double[] mu = new double[k];
int var21 = 0;
int var22 = 1;
for(int var23=var21; var23 < k; var23 += var22) {
	double var24 = var19.sample();
	mu[var23] = var24;
}
double var26 = 1.0;
double var27 = 1.0;
InverseGamma var28 = new Inverse Gamma(var26, var27);
double[] sigma = new double[k];
int var30 = 0;
int var31 = 1;
for(int var32=var30; var32 < k; var32 += var31) {
	double var33 = var28.sample();
	sigma[var32] = var33;
}
int var35 = xMeasured.length;
double[] x = new double[var35];
int var37 = 0;
int var38 = xMeasured.length;
int var39 = 1;
for(int i=var37; i < var38; i += var39) {
	Categorical var41 = new Categorical(phi);
	int z = var41.sample();
	double var43 = mu[z];
	double var44 = sigma[z];
	Gaussian var45 = new Gaussian(var43, var44);
	double var46 = var45.sample();
	x[i] = var46;
}
x.observe(xMeasured);
