package org.sandwood.compiler.tests.parser;

interface HMMMetrics$CoreInterface extends org.sandwood.runtime.internal.model.CoreModel {
	public double[] get$cpu();
	public void set$cpu(double[] cv$value);
	public double[] get$cpuMean();
	public void set$cpuMean(double[] cv$value);
	public double[] get$cpuVar();
	public void set$cpuVar(double[] cv$value);
	public double[] get$cpu_measured();
	public void set$cpu_measured(double[] cv$value);
	public boolean get$fixedFlag$sample109();
	public void set$fixedFlag$sample109(boolean cv$value);
	public boolean get$fixedFlag$sample118();
	public void set$fixedFlag$sample118(boolean cv$value);
	public boolean get$fixedFlag$sample123();
	public void set$fixedFlag$sample123(boolean cv$value);
	public boolean get$fixedFlag$sample128();
	public void set$fixedFlag$sample128(boolean cv$value);
	public boolean get$fixedFlag$sample25();
	public void set$fixedFlag$sample25(boolean cv$value);
	public boolean get$fixedFlag$sample31();
	public void set$fixedFlag$sample31(boolean cv$value);
	public boolean get$fixedFlag$sample34();
	public void set$fixedFlag$sample34(boolean cv$value);
	public boolean get$fixedFlag$sample44();
	public void set$fixedFlag$sample44(boolean cv$value);
	public boolean get$fixedFlag$sample57();
	public void set$fixedFlag$sample57(boolean cv$value);
	public boolean get$fixedFlag$sample68();
	public void set$fixedFlag$sample68(boolean cv$value);
	public boolean get$fixedFlag$sample79();
	public void set$fixedFlag$sample79(boolean cv$value);
	public boolean get$fixedFlag$sample89();
	public void set$fixedFlag$sample89(boolean cv$value);
	public boolean get$fixedFlag$sample99();
	public void set$fixedFlag$sample99(boolean cv$value);
	public double[] get$initialStateDistribution();
	public void set$initialStateDistribution(double[] cv$value);
	public int get$length$cpu_measured();
	public void set$length$cpu_measured(int cv$value);
	public double get$logProbability$cpu();
	public double get$logProbability$cpuMean();
	public double get$logProbability$cpuVar();
	public double get$logProbability$initialStateDistribution();
	public double get$logProbability$m();
	public double get$logProbability$mem();
	public double get$logProbability$memMean();
	public double get$logProbability$memVar();
	public double get$logProbability$pageFaults();
	public double get$logProbability$pageFaultsMean();
	public double get$logProbability$pageFaultsVar();
	public double get$logProbability$st();
	public double[][] get$m();
	public void set$m(double[][] cv$value);
	public double[] get$mem();
	public void set$mem(double[] cv$value);
	public double[] get$memMean();
	public void set$memMean(double[] cv$value);
	public double[] get$memVar();
	public void set$memVar(double[] cv$value);
	public double[] get$mem_measured();
	public void set$mem_measured(double[] cv$value);
	public int get$noStates();
	public void set$noStates(int cv$value);
	public double[] get$pageFaults();
	public void set$pageFaults(double[] cv$value);
	public double[] get$pageFaultsMean();
	public void set$pageFaultsMean(double[] cv$value);
	public double[] get$pageFaultsVar();
	public void set$pageFaultsVar(double[] cv$value);
	public double[] get$pageFaults_measured();
	public void set$pageFaults_measured(double[] cv$value);
	public int get$samples();
	public int[] get$st();
	public void set$st(int[] cv$value);
	public double[] get$v();
	public void logEvidenceGeneration();
}