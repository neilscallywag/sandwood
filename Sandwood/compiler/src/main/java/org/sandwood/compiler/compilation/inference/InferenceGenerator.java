/*
 * Sandwood
 *
 * Copyright (c) 2019-2023, Oracle and/or its affiliates
 *
 * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
 */

package org.sandwood.compiler.compilation.inference;

import java.util.List;

import org.sandwood.compiler.compilation.CompilationContext;
import org.sandwood.compiler.dataflowGraph.tasks.returnTasks.SampleTask;
import org.sandwood.compiler.dataflowGraph.variables.Variable;
import org.sandwood.compiler.dataflowGraph.variables.randomVariables.RandomVariable;
import org.sandwood.compiler.trees.irTree.IRVoidFunction;

public interface InferenceGenerator<A extends Variable<A>, B extends RandomVariable<A, B>> {

    /**
     * A function for generating a void function in the IR that performs a single inference step between the random
     * variables in the set and the sample generated by the sample task.
     */
    IRVoidFunction constructFunction(SampleTask<A, B> sample, CompilationContext compilationCtx);

    boolean canAcceptTraces(SampleTask<A, B> sample, List<String> suggestions, CompilationContext compilationCtx);

}